<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 현재 이 스프링 설정 파일의 기본 namespace는 MVC 이다.-->
	<!-- mvc 태그를 제외하고, 다른 namespace는 접두어를 하용해야 한다.-->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- @Controller, @Service, @Repository등의 mvc관련 어노테이션 처리 -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 정적파일 설정: /resources로 시작하는 요청은 /resource폴더 이하에서 조회, 서블릿이 처리하지 않음 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- ViewResolver빈 : jsp경로를 작성 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- base package 이하의 어노테이션: @Component, @Autowired 등 빈을 등록/연결 처리 -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- #9 handler interceptor 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean id="loggerInterceptor" class="com.kh.spring.common.interceptor.LoggerInterceptor"/>		
		</interceptor>
		<interceptor>
			<mapping path="/member/**/*.do"/>
			<exclude-mapping path="/member/login.do"/>
			<exclude-mapping path="/member/memberEnroll.do"/>
			<beans:bean id="loginInterceptor" class="com.kh.spring.common.interceptor.LoginInterceptor"/>		
		</interceptor>
	</interceptors>
	
<!-- #11.1 선언적 aop 작성
	<beans:bean id="loggerAspect" class="com.kh.spring.common.aop.LoggerAspect"/> -->
	
<!-- 	<aop:config>
		<aop:aspect id="loggerAspect" ref="loggerAspect">
			<aop:before method="beforeAdvice" pointcut-ref="loggerPointcut"/>
			<aop:around method="aroundAdvice" pointcut-ref="loggerPointcut"/>
			<aop:pointcut expression="execution(* com.kh.spring.memo..*(..))" id="loggerPointcut"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- #11.1 annotation aop 작성 -->
	<!-- 
		1. aop관련 annotation처리 
		2. application-context의 aop관련설정을 servlet-context 적용 
	-->
	<aop:aspectj-autoproxy/>
</beans:beans>
